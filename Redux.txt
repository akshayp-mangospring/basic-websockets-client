Redux is used for complex React App's centralized state management.

Why to use Redux Toolkit?
  The Redux website now itself recommends the usage of Redux Toolkit in it's own docs.
  Redux toolkit is an improvisation to Redux. It's much more organised, cleaner.
  It also has support for immutability out of the box, it uses `immer.js` for handling of immutable state.
  It also has got support for Redux middleware out of the box. So, we don't need to add `redux-thunk` separately. It has got `createAsyncThunk` in it.
  The newer version has got very less boilerplate code involved in it.
  The most fun fact is that it now supports the usage of Hooks just like ReactJS.
  So, we must now move on from Redux to Redux Toolkit.

Rule of Thumb:
Everything should be in Routing, even the Redux Toolkit Provider must also be in RouterProvider itself.
Router should be the root component for all the other components.

Redux Toolkit Flow:
The Store is the single source of truth for the entire App.
Store will hold all the reducers.
The store needs to be passed to the UI components.
We need to dispatch an action to make a change into the store.
The store then emits out a new state to be updated throughout the App.

Slices in Redux Toolkit:
When we create a Slice in Redux toolkit it'll create the reducer and action for us.
In create slice, we don't need to update the state in an immutable manner like old redux, we can simply change the state in a mutable manner and `immer.js` will take care of updating it properly.
A Slice is a collection of Reducer and Actions logic. It also has got the initialState contained in it.
Thus we don't have to write Redux logic, creating the actions are very simplified in Redux. Very less boilerplate code, thus it's much cleaner.

Store in Redux Toolkit:
Redux provides the `configureStore` method which helps to create the store to be used in the Redux application.
The Thunk middleware is by default present in the `configureStore` method. So, we don't need extra packages as well.
In configureStore we add all the slices we've created for our App.

Now we just need to add Redux into our App's UI. We need to add `ContainerComponents` and `Providers`.
Now we're gonna use the `react-redux` binding for it.
We're gonna add `Provider` to the Root Component. But it needs to be outside of the Routing.
So, we're gonna add it to the Layout components of our App.
Through `Provider` we add our Redux state to our App.

With Redux state, we ideally do two things:
Consume the state from Redux store.
Update the Redux state on the basis of some action that we are gonna take in our component.

React Redux Hooks:
React Redux now offers a set of Hooks as an alternative to the existing `connect` Higher Order Component(HOC).
These hooks allow you to connect to the Redux store and dispatch actions without having to wrap your components in `connect` function.
The most important hooks in React Redux:
  useSelector - Equivalent to mapStateToProps
    It takes a function argument that returns the part of the state which you want.

  useDispatch - Equivalent to mapDispatchToProps
    This hook returns the reference to the dispatch function from the Redux store.

Redux Thunk:
API calls must not be at the component level, instead they should also be from Redux. We should use Redux Thunk for it.
Redux is designed for Synchronous behavior, it standalone doesn't know how to handle any asynchronous logic.
Thus to achieve the goal of any Asynchronous operation in Redux there we use the middleware like Redux Thunk.
But Redux Toolkit offers the `createAsyncThunk` out of the box which performs the same operation like Redux Thunk.
It's sole motto is to remove API calls from React Components and move them to Redux.

The Rule of thumb is to hold data from API calls into a Separate Slice, in this way we can preserve the original data which we received from the API call.
We create a slice per feature/page, thus we need to maintain separate slices for separate stuff.
